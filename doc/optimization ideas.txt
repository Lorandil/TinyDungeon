Optimization ideas

<flash usage>
* store bitmaps in unused parts of other bitmaps (walls, status pane) or blank them out (like "Victory" in status pane)
  - there is no unused space in the bitmpas
  - zeroing bitmaps in the status pane costs 18 bytes of flash, so the gain would be negligible (21 free pixel bytes), but add unneccessary complexity.
-> NOPE
* splitting diagonal walls into single segments could save space
  - this should work, but requires an additional offset to next line/width for each bitmap (currently 20 bitmaps)
  - it would be possible to calculate from start and end (but that would require to split all bitmaps into single bitmaps and probably wouldn't save much space)
  - would kill mirroring left/right!!!
-> NOPE (because of the motion simulation by mirroring on each alternate position)
* splitting walls further:
  - large 88x64 wall in distance 1 could be created from a tile half the width (would save > 300 bytes(!))
  - diagonal walls could be split to make use of reduced height (costs 2 * 9 bytes for more table entries
  - does this work with mirroring)

<convenience>
* automatically place monsters in level during startup
  - cost is about 24 bytes of code and 1 byte per monster - fine by me...

<performance>
* store all visible walls/items in a small array (5x3 bytes) before rendering a frame
  - failed, only 10-20% performance increase, but 64 bytes more flash usage
* skip drawing the status pane if nothing has changed