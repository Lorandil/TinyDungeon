// Just a text file, but Ardiono IDE doesn't like "txt" to be added to the project

History and open points list of TinyDungeon

already achieved:
* made walls solid
* copy level from flash to RAM
* set Level size to fixed 16x16. There will be no stairs (lack of flash for more images or levels)
* mirror walls between odd and even cells to produce a "walking" effect
* added skeleton and beholder bitmap
* very plain draw function for non-wall-objects
* always respect solid bit
* added bitmap scaling
* added scripted events (levers switching doors, ...)
* code works on Arduino UNO and MEGA2560, too
* enhanced bitmap scaling to work with bitmap heights (in bytes) which are not a power of 2
* cropped the wall bitmaps to the required size saving 960 bytes
* added compass
* added open chest image
* added special treatment for item groups like chests and monsters
* removed alphabet except NESW for compass (to save flash)
* placed a compass in a chest
* added flash effect for teleporters (and spinners?)
* added events when player steps on a new field (-> teleporter, spinner)
* added a fountain (still without function)
* added a spinner
* added teleporter
* added screenshot via serial port
* added sound support for Arduino Uno R3 and Mega 2560
* every decent dungeon needs rats!
* player movement control now has a fast running loop. This will be used to create "random" numbers by counting fast
* new item: <Amulet of True Sight> removes all fake walls from the game
* new item <Ring of Orientation> causes the screen to flash if the player is teleported or spun
* placed Amulet of True Sight in a chest
* placed Ring of Orientation in a chest

next steps:
* Check/Change: 
  - player movement control has to have a fast running loop. This will be used to create "random" numbers by counting fast
  - required for walking monsters, too
  - and for healing over time
* Add game logic: 
  - define a goal:
  - when does the player lose? -> when the player (or the battery) dies
  - can the player die? -> yes, HP <= 0
  - what happens when the player dies?
  - what happens when the player wins?
  - can the player "break" the dungeon [i.e. get in a deadlock - probably yes :)]
  - are there walking monsters?
* "Invent" a combat system:
  - who attacks first?
  - always the player?
  - can the player upgrade his/her weapon?
  - how to visualize the combat?
  - how expensive (in flash bytes) is a random number generator?
  - can the player flee?
  - where to store the monster's stats?
    - in the dungeon bits?
    - in a table?
    - by the type?
* Should the player be healed by fountains?
  - how?
  - "using" from the distance
  - walking over it?
  - how often?
* require key to open chests/doors - use same key type for both?
* add a fountain to restore health
* extend object drawing to full field of view?
* add stairs up/down
* add monster(s)
* add treasure
* add a "combat system"
* ...
* add fun!

perhaps:
? use just left walls and mirror them for right:
  - saves 384 bytes + 24 empty bytes in the center
  - and should be quite easy, but kills the "movement" effect
  or
  - or use mirror table (nibble based?)
  - estimation: will save 300 bytes?

final steps:
? add floor graphics
? use only one bitmap for all front walls using downscaling <- is this really still necessary, it's just 576 bytes?! 


goal
* 4 levels(?) or one larger level (save space for stairs graphics)
* fun
* save to EEPROM?
